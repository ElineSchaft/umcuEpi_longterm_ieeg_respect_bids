function eventsannots = add_stimtrigger2annotation(stim,evname,eventsannots,annots_new,header,metadata,trigger)

%% find correct annotation
[~,numannots]=max(1./(repmat(trigger.pos(stim),size(annots_new,1),1)-[annots_new{:,1}]')); % distance between triggerposition and nearbiest annotation (must be the stim channels then)

n=0;
stimnums = cell(1);
stimnames = cell(1);
negannotfin = []; currannotfin = []; pulsdurannotfin = []; freqannotfin = []; biannotfin = [];

while size(stimnums,2) <2 || size(stimnames,2) <2
    
    negannot = regexp(lower(annots_new{numannots-n,2}),'neg', 'once');
    currannot = regexp(lower(annots_new{numannots-n,2}),'ma', 'once');
    pulsdurannot = regexp(lower(annots_new{numannots-n,2}),'sec', 'once');
    freqannot = regexp(lower(annots_new{numannots-n,2}),'hz', 'once');
    biannot = regexp(lower(annots_new{numannots-n,2}),'_bi', 'once');
    low_expect = regexp(lower(annots_new{numannots,2}),'requested', 'once');

    %% if the annotation is part of stimulation
    if ~isempty(negannot) && isempty(negannotfin)
        negannotfin = negannot;
    end
    
    if ~isempty(currannot) && isempty(currannotfin)
        currannotfin = currannot;
        numannotscurr = numannots-n;
    end
    
    if ~isempty(pulsdurannot) && isempty(pulsdurannotfin)
        pulsdurannotfin = pulsdurannot;
        numannotspulsdur = numannots-n;
    end
    
    if ~isempty(freqannot) && isempty(freqannotfin)
        freqannotfin = freqannot;
        numannotsfreq = numannots-n;
    end
    
    if ~isempty(biannot) && isempty(biannotfin)
        biannotfin = biannot;
    end

    if ~isempty(low_expect) && isempty(low_expectfin)
        low_expectfin = low_expect;
    end    
    
    %% find annotation with stimulus pair
    if ~isempty(regexp(annots_new{numannots-n,2},'_', 'once')) % if there is a _ in the annotation (normally, this is a SPES annotation)
        annotsplit = strsplit(annots_new{numannots-n,2},'_');
        % stimpair
        stimnames = regexp(lower(annotsplit{1}),'[a-z]*','match');
        stimnums = regexp(lower(annotsplit{1}),'\d*','match');
        
    elseif ~isempty(regexp(annots_new{numannots-n,2},'[-]', 'once')) % if the annotation looks like this C01-C02 1.0mA 1.0Hz 1025usec --> it is automatically generated by Micromed
        annotsplit = strsplit(annots_new{numannots-n,2},{'-',' '});
        % stimpair
        stimnames = cell(1); stimnums = cell(1);
        for chan =1:2
            channame = regexp(lower(annotsplit{chan}),'[a-z]*','match');
            channum = regexp(lower(annotsplit{chan}),'\d*','match');
            
            stimnames{chan} = channame{:};
            stimnums{chan} = channum{:};
        end
    else % if there is no _ or automatically generated annotation
        annotsplit = strsplit(annots_new{numannots-n,2},'_');
        stimnames = regexp(lower(annotsplit{1}),'[a-z]*','match');
        stimnums = regexp(lower(annotsplit{1}),'\d*','match');
    end
    
    n = n+1;
end

numannots_orig = numannots;
numannots = numannots-n+1;

%% find stimulus pair
[stimchan,stimnum] = findstimpair(stimnums,stimnames,metadata.ch_label);
if find(stimnum == 0)
    error('one stimulation channel has not been found')
end

% swap stimulus pair if "neg" is annotated
if ~isempty(negannotfin)
    stimchantemp = stimchan{1};
    stimchan{1} = stimchan{2};
    stimchan{2} = stimchantemp;
    stimnumtemp = stimnum(1);
    stimnum(1) = stimnum(2);
    stimnum(2) = stimnumtemp;
end

%% stimulation current
if ~isempty(currannotfin)
    annotsplit = strsplit(lower(annots_new{numannotscurr,2}),{'_',' '});
    containscurr = contains(lower(annotsplit),'ma');
    currsplit = strsplit(lower(annotsplit{containscurr}),'ma');
    stimcurrstr = currsplit{1};
    stimcurr = str2double(stimcurrstr)/1000;
else
    if contains(lower(metadata.format_info),'seeg')
        stimcurr = 2/1000;
    elseif contains(lower(metadata.format_info),'ecog')
        stimcurr = 8/1000;
    end
end

%% stimulation frequency
if ~isempty(freqannotfin)
    annotsplit = strsplit(lower(annots_new{numannotsfreq,2}),{'_',' '});
    containsfreq = contains(lower(annotsplit),'hz');
    freqsplit = strsplit(lower(annotsplit{containsfreq}),'hz');
    freqstr = freqsplit{1};
    freq = str2double(freqstr);
else
    freq = 0.2;
end

%% stimulation pulse duration
if ~isempty(pulsdurannotfin)
    annotsplit = strsplit(lower(annots_new{numannotspulsdur,2}),{'_',' '});
    containspuls = contains(annotsplit,'sec')==1;
    pulsdursplit = strsplit(lower(annotsplit{containspuls}),'sec');
    pulsdurstr = pulsdursplit{1};
    if ismember(65533,double(pulsdurstr)) % this value is micro (u) in Micromed
        pulsdur = str2double(pulsdurstr(~ismember(double(pulsdurstr),65533)))/1000000;
    end
elseif contains(lower(evname),'spes')
    pulsdur = 1/1000;
end

%% stimulation form (biphasic/monophasic)

if ~isempty(biannotfin)
    stimtype = 'biphasic';
elseif contains(lower(evname),'spes') || contains(lower(evname),'rec2stim')
    stimtype = 'monophasic';
elseif contains(lower(evname),'esm') || contains(lower(evname),'chocs') || contains(lower(evname),'treni')
    stimtype = 'biphasic';
end

%% note description
% notification that stimcurr is unknown
if contains(fieldnames(metadata),'stimcurr')
    if contains(lower(metadata.stimcurr),'unknown')
        note_desc = sprintf('Stimulation intensity is suggested to be %i mA but may differ when applied in eloquent tissue',stimcurdefault);
    else
        note_desc = 'n/a';
    end
else
    note_desc = 'n/a';
end

%% current lower than expected? 
if ~isempty(low_expect)
    note = annots_new{numannots,2};
elseif numannots_orig < size(annots_new,1)
    if contains(annots_new{numannots_orig+1,2},'requested') % in newer patients, the sentence "Current is lower than requested" is added at the end of the stimulation
        note = annots_new{numannots_orig+1,2};
    else
        note = note_desc;
    end
else
    note = note_desc;
end

%% stimulation start
samp_start = trigger.pos(stim);
s_start = round(trigger.pos(stim)/header.Rate_Min,1);% time in seconds (1 decimal)

%% stimulation end

% in REC2Stim, ESM, stimulation series can be mentioned to indicate when
% stimulation is over (and its artefact)
if any(trigger.val == 0)
    
    trig_stop = find(trigger.val ==0);
    
    num_trig_stop = find(trigger.pos(trig_stop)-trigger.pos(stim)>0,1,'first');
    samp_end = trigger.pos(trig_stop(num_trig_stop));
    s_end = round(samp_end/header.Rate_Min,1);% time in seconds (1 decimal)
    
else
    samp_end = 'n/a';
    s_end = 'n/a';
end

%% add to eventsannots
if size(eventsannots.type,2) == 0
    cc = 1;
else
    cc = size(eventsannots.type,2)+1;
end

eventsannots.type{cc} = 'electrical_stimulation';
eventsannots.sub_type{cc} = evname;
eventsannots.stim_type{cc} = stimtype;
eventsannots.samp_start{cc} = samp_start;
eventsannots.s_start{cc} = s_start; % time in seconds (1 decimal)
eventsannots.site_name{cc} = [stimchan{1} '-' stimchan{2}];
eventsannots.site_channum{cc} = num2str([stimnum(1), stimnum(2)]);
eventsannots.duration{cc} = pulsdur;
eventsannots.s_end{cc} = s_end;
eventsannots.samp_end{cc} = samp_end;
eventsannots.ch_name_on{cc} = 'n/a';
eventsannots.ch_name_off{cc} = 'n/a';
eventsannots.stim_cur{cc} = stimcurr;
eventsannots.notes{cc} = note;
eventsannots.freq{cc} = freq;

end
